diff --git a/dwm/config.h b/dwm/config.h
index 1064609..6c43605 100644
--- a/dwm/config.h
+++ b/dwm/config.h
@@ -125,7 +125,9 @@ static Key keys[] = {
     {MODKEYC, XK_period, tagfocusmon, {.i = +1}},
 
     {MODKEY, XK_q, killclient, {0}},
-    {MODKEYS, XK_q, quit, {0}},
+
+    /* Quit with auto-restart */
+    {MODKEYS, XK_q, quit, {1}},
 
     TAGKEYS(XK_1, 0) TAGKEYS(XK_2, 1) TAGKEYS(XK_3, 2) TAGKEYS(XK_4, 3)
         TAGKEYS(XK_5, 4) TAGKEYS(XK_6, 5) TAGKEYS(XK_7, 6) TAGKEYS(XK_8, 7)
diff --git a/dwm/dwm.1 b/dwm/dwm.1
index ddc8321..7eaa272 100644
--- a/dwm/dwm.1
+++ b/dwm/dwm.1
@@ -142,6 +142,12 @@ Add/remove all windows with nth tag to/from the view.
 .TP
 .B Mod1\-Shift\-q
 Quit dwm.
+.TP
+.B Mod1\-Control\-Shift\-q
+Restart dwm.
+.TP
+.B Mod1\-Control\-Shift\-q
+Restart dwm.
 .SS Mouse commands
 .TP
 .B Mod1\-Button1
@@ -155,6 +161,20 @@ Resize focused window while dragging. Tiled windows will be toggled to the float
 .SH CUSTOMIZATION
 dwm is customized by creating a custom config.h and (re)compiling the source
 code. This keeps it fast, secure and simple.
+.SH SIGNALS
+.TP
+.B SIGHUP - 1
+Restart the dwm process.
+.TP
+.B SIGTERM - 15
+Cleanly terminate the dwm process.
+.SH SIGNALS
+.TP
+.B SIGHUP - 1
+Restart the dwm process.
+.TP
+.B SIGTERM - 15
+Cleanly terminate the dwm process.
 .SH SEE ALSO
 .BR dmenu (1),
 .BR st (1)
diff --git a/dwm/dwm.c b/dwm/dwm.c
index d6e2f14..a689563 100644
--- a/dwm/dwm.c
+++ b/dwm/dwm.c
@@ -234,6 +234,8 @@ static void setmfact(const Arg *arg);
 static void setup(void);
 static void seturgent(Client *c, int urg);
 static void showhide(Client *c);
+static void sighup(int unused);
+static void sigterm(int unused);
 static void spawn(const Arg *arg);
 static void tag(const Arg *arg);
 static void tagmon(const Arg *arg);
@@ -292,6 +294,7 @@ static void (*handler[LASTEvent])(XEvent *) = {
     [PropertyNotify] = propertynotify,
     [UnmapNotify] = unmapnotify};
 static Atom wmatom[WMLast], netatom[NetLast];
+static int restart = 0;
 static int running = 1;
 static Cur *cursor[CurLast];
 static Clr **scheme;
@@ -1280,7 +1283,10 @@ void propertynotify(XEvent *e) {
   }
 }
 
-void quit(const Arg *arg) { running = 0; }
+void quit(const Arg *arg) {
+  if(arg->i) restart = 1;
+  running = 0;
+}
 
 Monitor *recttomon(int x, int y, int w, int h) {
   Monitor *m, *r = selmon;
@@ -1574,6 +1580,8 @@ void setup(void) {
   /* clean up any zombies (inherited from .xinitrc etc) immediately */
   while (waitpid(-1, NULL, WNOHANG) > 0)
     ;
+  signal(SIGHUP, sighup);
+  signal(SIGTERM, sigterm);
 
   /* init screen */
   screen = DefaultScreen(dpy);
@@ -1665,6 +1673,21 @@ void showhide(Client *c) {
   }
 }
 
+
+void
+sighup(int unused)
+{
+	Arg a = {.i = 1};
+	quit(&a);
+}
+
+void
+sigterm(int unused)
+{
+	Arg a = {.i = 0};
+	quit(&a);
+}
+
 void spawn(const Arg *arg) {
   struct sigaction sa;
 
@@ -2167,6 +2190,7 @@ int main(int argc, char *argv[]) {
 #endif /* __OpenBSD__ */
   scan();
   run();
+  if(restart) execvp(argv[0], argv);
   cleanup();
   XCloseDisplay(dpy);
   return EXIT_SUCCESS;
